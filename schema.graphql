"""Account holding keys and plan."""
type Account_Account implements Account_Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id of the account."""
  rowId: Account_BigInt!

  """The time when the account was created."""
  createdAt: Account_Datetime!

  """The time when the account was last updated."""
  updatedAt: Account_Datetime!
  signingKeyId: Account_BigInt
  encryptionKeyId: Account_BigInt

  """Reads a single `Key` that is related to this `Account`."""
  signingKey: Account_Key

  """Reads a single `Key` that is related to this `Account`."""
  encryptionKey: Account_Key

  """Reads and enables pagination through a set of `Key`."""
  keys(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """The method to use when ordering `Key`."""
    orderBy: [Account_KeysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Account_KeyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_KeyFilter
  ): Account_KeysConnection!

  """Reads a single `User` that is related to this `Account`."""
  user: Account_User

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """The method to use when ordering `User`."""
    orderBy: [Account_UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Account_UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_UserFilter
  ): Account_UsersConnection! @deprecated(reason: "Please use user instead")

  """Reads a single `Organization` that is related to this `Account`."""
  organization: Account_Organization

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """The method to use when ordering `Organization`."""
    orderBy: [Account_OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Account_OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_OrganizationFilter
  ): Account_OrganizationsConnection! @deprecated(reason: "Please use organization instead")

  """Reads a single `Team` that is related to this `Account`."""
  team: Account_Team

  """Reads and enables pagination through a set of `Team`."""
  teams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """The method to use when ordering `Team`."""
    orderBy: [Account_TeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Account_TeamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_TeamFilter
  ): Account_TeamsConnection! @deprecated(reason: "Please use team instead")

  """Reads a single `Bot` that is related to this `Account`."""
  bot: Account_Bot

  """Reads and enables pagination through a set of `Bot`."""
  bots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """The method to use when ordering `Bot`."""
    orderBy: [Account_BotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Account_BotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_BotFilter
  ): Account_BotsConnection! @deprecated(reason: "Please use bot instead")
  canSelect: Boolean @deprecated(reason: "Useless field, always true")
  canUpdate: Boolean

  """The members of an account."""
  members(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_MemberFilter
  ): Account_MembersConnection!

  """
  The members of an account that are not a part of the provided entity. This can
  be useful for getting the members of an organization that are not part of a specific team.
  """
  membersOutsideEntity(
    accountRowId: Account_BigInt

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_MemberFilter
  ): Account_MembersConnection!

  """
  Get the underlying entity object (User,Team or Organization) as a Node interface.
  """
  entity: Account_Node
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input Account_AccountCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Account_BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Account_Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Account_Datetime

  """Checks for equality with the object’s `signingKeyId` field."""
  signingKeyId: Account_BigInt

  """Checks for equality with the object’s `encryptionKeyId` field."""
  encryptionKeyId: Account_BigInt
}

"""
A filter to be used against `Account` object types. All fields are combined with a logical ‘and.’
"""
input Account_AccountFilter {
  """Filter by the object’s `rowId` field."""
  rowId: Account_BigIntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: Account_DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: Account_DatetimeFilter

  """Filter by the object’s `signingKeyId` field."""
  signingKeyId: Account_BigIntFilter

  """Filter by the object’s `encryptionKeyId` field."""
  encryptionKeyId: Account_BigIntFilter

  """Filter by the object’s `canSelect` field."""
  canSelect: Account_BooleanFilter

  """Filter by the object’s `canUpdate` field."""
  canUpdate: Account_BooleanFilter

  """Checks for all expressions in this list."""
  and: [Account_AccountFilter!]

  """Checks for any expressions in this list."""
  or: [Account_AccountFilter!]

  """Negates the expression."""
  not: Account_AccountFilter
}

"""A connection to a list of `Account` values."""
type Account_AccountsConnection {
  """A list of `Account` objects."""
  nodes: [Account_Account]!

  """
  A list of edges which contains the `Account` and cursor to aid in pagination.
  """
  edges: [Account_AccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: Account_PageInfo!

  """The count of *all* `Account` you could get from the connection."""
  totalCount: Int!
}

"""A `Account` edge in the connection."""
type Account_AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Account_Cursor

  """The `Account` at the end of the edge."""
  node: Account_Account
}

"""Methods to use when ordering `Account`."""
enum Account_AccountsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  SIGNING_KEY_ID_ASC
  SIGNING_KEY_ID_DESC
  ENCRYPTION_KEY_ID_ASC
  ENCRYPTION_KEY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar Account_BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input Account_BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Account_BigInt

  """Not equal to the specified value."""
  notEqualTo: Account_BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Account_BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Account_BigInt

  """Included in the specified list."""
  in: [Account_BigInt!]

  """Not included in the specified list."""
  notIn: [Account_BigInt!]

  """Less than the specified value."""
  lessThan: Account_BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Account_BigInt

  """Greater than the specified value."""
  greaterThan: Account_BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Account_BigInt
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input Account_BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""A bot account used for third-party applications"""
type Account_Bot implements Account_Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The ID of the bot"""
  rowId: Account_BigInt!

  """Bot name"""
  name: String!

  """Bot description"""
  description: String

  """Bot logo"""
  avatar: String

  """Bot parent organization"""
  organizationId: Account_BigInt!
  accountId: Account_BigInt!
  createdAt: Account_Datetime!
  updatedAt: Account_Datetime!

  """
  The date of deletion of the bot, if it has been removed from its organization
  """
  deletedAt: Account_Datetime

  """Reads a single `Account` that is related to this `Bot`."""
  account: Account_Account
  canUpdate: Boolean
  organization: Account_Organization

  """Reads and enables pagination through a set of `Team`."""
  teams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_TeamFilter
  ): Account_TeamsConnection!
}

"""
A condition to be used against `Bot` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input Account_BotCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Account_BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `avatar` field."""
  avatar: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Account_BigInt

  """Checks for equality with the object’s `accountId` field."""
  accountId: Account_BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Account_Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Account_Datetime
}

"""
A filter to be used against `Bot` object types. All fields are combined with a logical ‘and.’
"""
input Account_BotFilter {
  """Filter by the object’s `rowId` field."""
  rowId: Account_BigIntFilter

  """Filter by the object’s `name` field."""
  name: Account_StringFilter

  """Filter by the object’s `description` field."""
  description: Account_StringFilter

  """Filter by the object’s `avatar` field."""
  avatar: Account_StringFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: Account_BigIntFilter

  """Filter by the object’s `accountId` field."""
  accountId: Account_BigIntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: Account_DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: Account_DatetimeFilter

  """Filter by the object’s `canUpdate` field."""
  canUpdate: Account_BooleanFilter

  """Checks for all expressions in this list."""
  and: [Account_BotFilter!]

  """Checks for any expressions in this list."""
  or: [Account_BotFilter!]

  """Negates the expression."""
  not: Account_BotFilter
}

"""A connection to a list of `Bot` values."""
type Account_BotsConnection {
  """A list of `Bot` objects."""
  nodes: [Account_Bot]!

  """
  A list of edges which contains the `Bot` and cursor to aid in pagination.
  """
  edges: [Account_BotsEdge!]!

  """Information to aid in pagination."""
  pageInfo: Account_PageInfo!

  """The count of *all* `Bot` you could get from the connection."""
  totalCount: Int!
}

"""A `Bot` edge in the connection."""
type Account_BotsEdge {
  """A cursor for use in pagination."""
  cursor: Account_Cursor

  """The `Bot` at the end of the edge."""
  node: Account_Bot
}

"""Methods to use when ordering `Bot`."""
enum Account_BotsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  AVATAR_ASC
  AVATAR_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A location in a connection that can be used for resuming pagination."""
scalar Account_Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Account_Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input Account_DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Account_Datetime

  """Not equal to the specified value."""
  notEqualTo: Account_Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Account_Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Account_Datetime

  """Included in the specified list."""
  in: [Account_Datetime!]

  """Not included in the specified list."""
  notIn: [Account_Datetime!]

  """Less than the specified value."""
  lessThan: Account_Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Account_Datetime

  """Greater than the specified value."""
  greaterThan: Account_Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Account_Datetime
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input Account_IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""A signing key."""
type Account_Key implements Account_Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id of the key."""
  rowId: Account_BigInt!

  """The account id the key is linked to"""
  accountId: Account_BigInt!

  """Key usage type"""
  usage: Account_KeyUsage!

  """PEM encoded public key"""
  publicKey: String!

  """Has the key been deprecated"""
  deprecated: Boolean!

  """The time when the key was deprecated"""
  deprecatedAt: Account_Datetime

  """The time when the key was created."""
  createdAt: Account_Datetime!

  """The time when the key was last updated."""
  updatedAt: Account_Datetime!

  """Reads a single `Account` that is related to this `Key`."""
  account: Account_Account

  """Reads and enables pagination through a set of `Account`."""
  accountForActiveSigningKey(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """The method to use when ordering `Account`."""
    orderBy: [Account_AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Account_AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_AccountFilter
  ): Account_AccountsConnection!

  """Reads and enables pagination through a set of `Account`."""
  accountForActiveEncryptionKey(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """The method to use when ordering `Account`."""
    orderBy: [Account_AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Account_AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_AccountFilter
  ): Account_AccountsConnection!

  """Reads a single `PrivateKey` that is related to this `Key`."""
  privateKey: Account_PrivateKey
  canSelect: Boolean @deprecated(reason: "Useless field, always true")
  canUpdate: Boolean
}

"""
A condition to be used against `Key` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input Account_KeyCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Account_BigInt

  """Checks for equality with the object’s `accountId` field."""
  accountId: Account_BigInt

  """Checks for equality with the object’s `usage` field."""
  usage: Account_KeyUsage

  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `deprecated` field."""
  deprecated: Boolean

  """Checks for equality with the object’s `deprecatedAt` field."""
  deprecatedAt: Account_Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Account_Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Account_Datetime
}

"""
A filter to be used against `Key` object types. All fields are combined with a logical ‘and.’
"""
input Account_KeyFilter {
  """Filter by the object’s `rowId` field."""
  rowId: Account_BigIntFilter

  """Filter by the object’s `accountId` field."""
  accountId: Account_BigIntFilter

  """Filter by the object’s `usage` field."""
  usage: Account_KeyUsageFilter

  """Filter by the object’s `publicKey` field."""
  publicKey: Account_StringFilter

  """Filter by the object’s `deprecated` field."""
  deprecated: Account_BooleanFilter

  """Filter by the object’s `deprecatedAt` field."""
  deprecatedAt: Account_DatetimeFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: Account_DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: Account_DatetimeFilter

  """Filter by the object’s `canSelect` field."""
  canSelect: Account_BooleanFilter

  """Filter by the object’s `canUpdate` field."""
  canUpdate: Account_BooleanFilter

  """Checks for all expressions in this list."""
  and: [Account_KeyFilter!]

  """Checks for any expressions in this list."""
  or: [Account_KeyFilter!]

  """Negates the expression."""
  not: Account_KeyFilter
}

"""A connection to a list of `Key` values."""
type Account_KeysConnection {
  """A list of `Key` objects."""
  nodes: [Account_Key]!

  """
  A list of edges which contains the `Key` and cursor to aid in pagination.
  """
  edges: [Account_KeysEdge!]!

  """Information to aid in pagination."""
  pageInfo: Account_PageInfo!

  """The count of *all* `Key` you could get from the connection."""
  totalCount: Int!
}

"""A `Key` edge in the connection."""
type Account_KeysEdge {
  """A cursor for use in pagination."""
  cursor: Account_Cursor

  """The `Key` at the end of the edge."""
  node: Account_Key
}

"""Methods to use when ordering `Key`."""
enum Account_KeysOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  USAGE_ASC
  USAGE_DESC
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  DEPRECATED_ASC
  DEPRECATED_DESC
  DEPRECATED_AT_ASC
  DEPRECATED_AT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum Account_KeyUsage {
  SIGN
  ENCRYPT
}

"""
A filter to be used against KeyUsage fields. All fields are combined with a logical ‘and.’
"""
input Account_KeyUsageFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Account_KeyUsage

  """Not equal to the specified value."""
  notEqualTo: Account_KeyUsage

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Account_KeyUsage

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Account_KeyUsage

  """Included in the specified list."""
  in: [Account_KeyUsage!]

  """Not included in the specified list."""
  notIn: [Account_KeyUsage!]
}

""" An account member."""
type Account_Member {
  """The id of the user."""
  userId: Account_BigInt

  """The id of the account."""
  accountId: Account_BigInt

  """Is the user a reader of the account."""
  reader: Boolean

  """Is the user an admin of the account."""
  admin: Boolean

  """
  Whether or not the user is a collaborator (i.e. external to the organization)
  """
  collaborator: Boolean

  """The email address of the user."""
  email: String

  """The name of the user."""
  name: String

  """The user entity behind the member."""
  user: Account_User
}

"""
A filter to be used against `Member` object types. All fields are combined with a logical ‘and.’
"""
input Account_MemberFilter {
  """Filter by the object’s `userId` field."""
  userId: Account_BigIntFilter

  """Filter by the object’s `accountId` field."""
  accountId: Account_BigIntFilter

  """Filter by the object’s `reader` field."""
  reader: Account_BooleanFilter

  """Filter by the object’s `admin` field."""
  admin: Account_BooleanFilter

  """Filter by the object’s `collaborator` field."""
  collaborator: Account_BooleanFilter

  """Filter by the object’s `email` field."""
  email: Account_StringFilter

  """Filter by the object’s `name` field."""
  name: Account_StringFilter

  """Checks for all expressions in this list."""
  and: [Account_MemberFilter!]

  """Checks for any expressions in this list."""
  or: [Account_MemberFilter!]

  """Negates the expression."""
  not: Account_MemberFilter
}

"""A connection to a list of `Member` values."""
type Account_MembersConnection {
  """A list of `Member` objects."""
  nodes: [Account_Member]!

  """
  A list of edges which contains the `Member` and cursor to aid in pagination.
  """
  edges: [Account_MembersEdge!]!

  """Information to aid in pagination."""
  pageInfo: Account_PageInfo!

  """The count of *all* `Member` you could get from the connection."""
  totalCount: Int!
}

"""A `Member` edge in the connection."""
type Account_MembersEdge {
  """A cursor for use in pagination."""
  cursor: Account_Cursor

  """The `Member` at the end of the edge."""
  node: Account_Member
}

"""An object with a globally unique `ID`."""
interface Account_Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""An organization"""
type Account_Organization implements Account_Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id of the organization"""
  rowId: Account_BigInt!

  """Organization official name"""
  name: String!

  """Organization description"""
  description: String!

  """Organization logo"""
  avatar: String

  """Official domain name for the organization"""
  domainName: String

  """Id of the account linked to the organization"""
  accountId: Account_BigInt!

  """The time when the team was created."""
  createdAt: Account_Datetime!

  """The time when the team was last updated."""
  updatedAt: Account_Datetime!

  """The amount of purchased seats for an organization."""
  seats: Int

  """
  The amount of purchased group administrator licenses for an organization.
  """
  groupAdministratorLicenses: Int

  """
  The amount of purchased organization owner licenses for an organization.
  """
  organizationOwnerLicenses: Int

  """
  The list of auth providers allowed for a user to signup when invited in this organization.
  """
  providers: [Account_Provider]

  """Reads a single `Account` that is related to this `Organization`."""
  account: Account_Account

  """Reads and enables pagination through a set of `Team`."""
  teams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """The method to use when ordering `Team`."""
    orderBy: [Account_TeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Account_TeamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_TeamFilter
  ): Account_TeamsConnection!

  """Reads and enables pagination through a set of `Bot`."""
  bots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_BotFilter
  ): Account_BotsConnection!
  canInsert: Boolean @deprecated(reason: "Useless field, always true")
  canSelect: Boolean @deprecated(reason: "Useless field, always true")
  canUpdate: Boolean

  """Returns a list of `User`s who are collaborators of the `Organization`."""
  collaborators(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_UserFilter
  ): Account_UsersConnection!

  """The amount of group administrator licenses left for an organization."""
  groupAdministratorLicensesLeft: Int

  """The members of an organization."""
  members(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_MemberFilter
  ): Account_MembersConnection!

  """The amount of organization owner licenses left for an organization."""
  organizationOwnerLicensesLeft: Int

  """The amount of seats left for an organization."""
  seatsLeft: Int
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input Account_OrganizationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Account_BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `avatar` field."""
  avatar: String

  """Checks for equality with the object’s `domainName` field."""
  domainName: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: Account_BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Account_Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Account_Datetime

  """Checks for equality with the object’s `seats` field."""
  seats: Int

  """
  Checks for equality with the object’s `groupAdministratorLicenses` field.
  """
  groupAdministratorLicenses: Int

  """
  Checks for equality with the object’s `organizationOwnerLicenses` field.
  """
  organizationOwnerLicenses: Int

  """Checks for equality with the object’s `providers` field."""
  providers: [Account_Provider]
}

"""
A filter to be used against `Organization` object types. All fields are combined with a logical ‘and.’
"""
input Account_OrganizationFilter {
  """Filter by the object’s `rowId` field."""
  rowId: Account_BigIntFilter

  """Filter by the object’s `name` field."""
  name: Account_StringFilter

  """Filter by the object’s `description` field."""
  description: Account_StringFilter

  """Filter by the object’s `avatar` field."""
  avatar: Account_StringFilter

  """Filter by the object’s `domainName` field."""
  domainName: Account_StringFilter

  """Filter by the object’s `accountId` field."""
  accountId: Account_BigIntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: Account_DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: Account_DatetimeFilter

  """Filter by the object’s `seats` field."""
  seats: Account_IntFilter

  """Filter by the object’s `groupAdministratorLicenses` field."""
  groupAdministratorLicenses: Account_IntFilter

  """Filter by the object’s `organizationOwnerLicenses` field."""
  organizationOwnerLicenses: Account_IntFilter

  """Filter by the object’s `providers` field."""
  providers: Account_ProviderListFilter

  """Filter by the object’s `canInsert` field."""
  canInsert: Account_BooleanFilter

  """Filter by the object’s `canSelect` field."""
  canSelect: Account_BooleanFilter

  """Filter by the object’s `canUpdate` field."""
  canUpdate: Account_BooleanFilter

  """Filter by the object’s `groupAdministratorLicensesLeft` field."""
  groupAdministratorLicensesLeft: Account_IntFilter

  """Filter by the object’s `organizationOwnerLicensesLeft` field."""
  organizationOwnerLicensesLeft: Account_IntFilter

  """Filter by the object’s `seatsLeft` field."""
  seatsLeft: Account_IntFilter

  """Checks for all expressions in this list."""
  and: [Account_OrganizationFilter!]

  """Checks for any expressions in this list."""
  or: [Account_OrganizationFilter!]

  """Negates the expression."""
  not: Account_OrganizationFilter
}

"""A connection to a list of `Organization` values."""
type Account_OrganizationsConnection {
  """A list of `Organization` objects."""
  nodes: [Account_Organization]!

  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [Account_OrganizationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: Account_PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type Account_OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Account_Cursor

  """The `Organization` at the end of the edge."""
  node: Account_Organization
}

"""Methods to use when ordering `Organization`."""
enum Account_OrganizationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  AVATAR_ASC
  AVATAR_DESC
  DOMAIN_NAME_ASC
  DOMAIN_NAME_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  SEATS_ASC
  SEATS_DESC
  GROUP_ADMINISTRATOR_LICENSES_ASC
  GROUP_ADMINISTRATOR_LICENSES_DESC
  ORGANIZATION_OWNER_LICENSES_ASC
  ORGANIZATION_OWNER_LICENSES_DESC
  PROVIDERS_ASC
  PROVIDERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type Account_PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Account_Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Account_Cursor
}

"""A signing key."""
type Account_PrivateKey implements Account_Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id of the private key."""
  rowId: Account_BigInt!

  """PEM encoded private key."""
  privateKey: String!

  """Is private key password protected."""
  passwordProtected: Boolean!
  publicKeyId: Account_BigInt!

  """Reads a single `Key` that is related to this `PrivateKey`."""
  public: Account_Key
  canSelect: Boolean @deprecated(reason: "Useless field, always true")
  canUpdate: Boolean

  """Decrypted PEM encoded private key"""
  decrypted: String
  owner: Account_Account
}

enum Account_Provider {
  STRATUMN
  GOOGLE
  PASS_AXA
  CNP
}

"""
A filter to be used against Provider List fields. All fields are combined with a logical ‘and.’
"""
input Account_ProviderListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [Account_Provider]

  """Not equal to the specified value."""
  notEqualTo: [Account_Provider]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [Account_Provider]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [Account_Provider]

  """Any array item is equal to the specified value."""
  anyEqualTo: Account_Provider

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: Account_Provider
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input Account_StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  """
  similarTo: String

  """
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  """
  notSimilarTo: String
}

"""An organization"""
type Account_Team implements Account_Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id og the team"""
  rowId: Account_BigInt!

  """Team name"""
  name: String!

  """Team description"""
  description: String!

  """Team logo"""
  avatar: String

  """Team parent organization"""
  organizationId: Account_BigInt!
  accountId: Account_BigInt!
  createdAt: Account_Datetime!
  updatedAt: Account_Datetime!

  """Reads a single `Organization` that is related to this `Team`."""
  organization: Account_Organization

  """Reads a single `Account` that is related to this `Team`."""
  account: Account_Account

  """Reads and enables pagination through a set of `Bot`."""
  bots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_BotFilter
  ): Account_BotsConnection!
  canInsert: Boolean @deprecated(reason: "Useless field, always true")
  canSelect: Boolean @deprecated(reason: "Useless field, always true")
  canUpdate: Boolean

  """The members of an team."""
  members(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_MemberFilter
  ): Account_MembersConnection!
}

"""
A condition to be used against `Team` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input Account_TeamCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Account_BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `avatar` field."""
  avatar: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Account_BigInt

  """Checks for equality with the object’s `accountId` field."""
  accountId: Account_BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Account_Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Account_Datetime
}

"""
A filter to be used against `Team` object types. All fields are combined with a logical ‘and.’
"""
input Account_TeamFilter {
  """Filter by the object’s `rowId` field."""
  rowId: Account_BigIntFilter

  """Filter by the object’s `name` field."""
  name: Account_StringFilter

  """Filter by the object’s `description` field."""
  description: Account_StringFilter

  """Filter by the object’s `avatar` field."""
  avatar: Account_StringFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: Account_BigIntFilter

  """Filter by the object’s `accountId` field."""
  accountId: Account_BigIntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: Account_DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: Account_DatetimeFilter

  """Filter by the object’s `canInsert` field."""
  canInsert: Account_BooleanFilter

  """Filter by the object’s `canSelect` field."""
  canSelect: Account_BooleanFilter

  """Filter by the object’s `canUpdate` field."""
  canUpdate: Account_BooleanFilter

  """Checks for all expressions in this list."""
  and: [Account_TeamFilter!]

  """Checks for any expressions in this list."""
  or: [Account_TeamFilter!]

  """Negates the expression."""
  not: Account_TeamFilter
}

"""A connection to a list of `Team` values."""
type Account_TeamsConnection {
  """A list of `Team` objects."""
  nodes: [Account_Team]!

  """
  A list of edges which contains the `Team` and cursor to aid in pagination.
  """
  edges: [Account_TeamsEdge!]!

  """Information to aid in pagination."""
  pageInfo: Account_PageInfo!

  """The count of *all* `Team` you could get from the connection."""
  totalCount: Int!
}

"""A `Team` edge in the connection."""
type Account_TeamsEdge {
  """A cursor for use in pagination."""
  cursor: Account_Cursor

  """The `Team` at the end of the edge."""
  node: Account_Team
}

"""Methods to use when ordering `Team`."""
enum Account_TeamsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  AVATAR_ASC
  AVATAR_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A user"""
type Account_User implements Account_Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id of the user"""
  rowId: Account_BigInt!

  """User email"""
  email: String!

  """User phone number"""
  phone: String

  """User profile picture"""
  avatar: String

  """The id of the account linked to the user"""
  accountId: Account_BigInt!

  """Whether user has superuser access rights."""
  isSuperuser: Boolean

  """The time when the user was created."""
  createdAt: Account_Datetime!

  """The time when the user was last updated."""
  updatedAt: Account_Datetime!
  pending: Boolean

  """The first name of the user."""
  firstName: String

  """The last name of the user."""
  lastName: String

  """Reads a single `Account` that is related to this `User`."""
  account: Account_Account
  canInsert: Boolean @deprecated(reason: "Useless field, always true")
  canUpdate: Boolean

  """The accounts to which the user participates."""
  memberOf(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_AccountFilter
  ): Account_AccountsConnection!

  """The first name and last name concatenated together."""
  name: String!

  """The organizations to which the user belongs."""
  organizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_OrganizationFilter
  ): Account_OrganizationsConnection!

  """The teams to which the user belongs."""
  teams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Account_Cursor

    """Read all values in the set after (below) this cursor."""
    after: Account_Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Account_TeamFilter
  ): Account_TeamsConnection!

  """Indicates if the invite token has expired"""
  inviteExpired: Boolean!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input Account_UserCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Account_BigInt

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `avatar` field."""
  avatar: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: Account_BigInt

  """Checks for equality with the object’s `isSuperuser` field."""
  isSuperuser: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Account_Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Account_Datetime

  """Checks for equality with the object’s `pending` field."""
  pending: Boolean

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input Account_UserFilter {
  """Filter by the object’s `rowId` field."""
  rowId: Account_BigIntFilter

  """Filter by the object’s `email` field."""
  email: Account_StringFilter

  """Filter by the object’s `phone` field."""
  phone: Account_StringFilter

  """Filter by the object’s `avatar` field."""
  avatar: Account_StringFilter

  """Filter by the object’s `accountId` field."""
  accountId: Account_BigIntFilter

  """Filter by the object’s `isSuperuser` field."""
  isSuperuser: Account_BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: Account_DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: Account_DatetimeFilter

  """Filter by the object’s `pending` field."""
  pending: Account_BooleanFilter

  """Filter by the object’s `firstName` field."""
  firstName: Account_StringFilter

  """Filter by the object’s `lastName` field."""
  lastName: Account_StringFilter

  """Filter by the object’s `canInsert` field."""
  canInsert: Account_BooleanFilter

  """Filter by the object’s `canUpdate` field."""
  canUpdate: Account_BooleanFilter

  """Filter by the object’s `name` field."""
  name: Account_StringFilter

  """Checks for all expressions in this list."""
  and: [Account_UserFilter!]

  """Checks for any expressions in this list."""
  or: [Account_UserFilter!]

  """Negates the expression."""
  not: Account_UserFilter
}

"""A connection to a list of `User` values."""
type Account_UsersConnection {
  """A list of `User` objects."""
  nodes: [Account_User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [Account_UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: Account_PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type Account_UsersEdge {
  """A cursor for use in pagination."""
  cursor: Account_Cursor

  """The `User` at the end of the edge."""
  node: Account_User
}

"""Methods to use when ordering `User`."""
enum Account_UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  PHONE_ASC
  PHONE_DESC
  AVATAR_ASC
  AVATAR_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  IS_SUPERUSER_ASC
  IS_SUPERUSER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PENDING_ASC
  PENDING_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Action {
  """The identifier of the action"""
  key: String!

  """The form associated to the action"""
  form: ActionForm

  """The icon attached to the action"""
  icon: String

  """The effects performed by the action"""
  effects: JSON

  """The name of the stage of the action"""
  stageName: String

  """The description of the action"""
  description: String
  title: String
  dataImporter: JSON
  dataEditor: JSON
  definitions: JSON

  """Is the current user allowed to use this action"""
  canUse: Boolean
}

"""
A filter to be used against `Action` object types. All fields are combined with a logical ‘and.’
"""
input ActionFilter {
  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `icon` field."""
  icon: StringFilter

  """Filter by the object’s `effects` field."""
  effects: JSONFilter

  """Filter by the object’s `stageName` field."""
  stageName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `dataImporter` field."""
  dataImporter: JSONFilter

  """Filter by the object’s `dataEditor` field."""
  dataEditor: JSONFilter

  """Filter by the object’s `definitions` field."""
  definitions: JSONFilter

  """Filter by the object’s `canUse` field."""
  canUse: BooleanFilter

  """Filter by the object’s `form` field."""
  form: ActionFormFilter

  """Checks for all expressions in this list."""
  and: [ActionFilter!]

  """Checks for any expressions in this list."""
  or: [ActionFilter!]

  """Negates the expression."""
  not: ActionFilter
}

"""The form associated to an action"""
type ActionForm {
  """The JSON schema of the form"""
  schema: JSON

  """The UI schema of the form"""
  uiSchema: JSON
}

"""
A filter to be used against `ActionForm` object types. All fields are combined with a logical ‘and.’
"""
input ActionFormFilter {
  """Filter by the object’s `schema` field."""
  schema: JSONFilter

  """Filter by the object’s `uiSchema` field."""
  uiSchema: JSONFilter

  """Checks for all expressions in this list."""
  and: [ActionFormFilter!]

  """Checks for any expressions in this list."""
  or: [ActionFormFilter!]

  """Negates the expression."""
  not: ActionFormFilter
}

"""A connection to a list of `Action` values."""
type ActionsConnection {
  """A list of `Action` objects."""
  nodes: [Action]!

  """
  A list of edges which contains the `Action` and cursor to aid in pagination.
  """
  edges: [ActionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Action` you could get from the connection."""
  totalCount: Int!
}

"""A `Action` edge in the connection."""
type ActionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Action` at the end of the edge."""
  node: Action
}

"""All input for the `addTagsToTrace` mutation."""
input AddTagsToTraceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  traceRowId: UUID
  tags: [String]
}

"""The output of our `addTagsToTrace` mutation."""
type AddTagsToTracePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  trace: Trace

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Workflow` that is related to this `Trace`."""
  workflow: Workflow

  """An edge for our `Trace`. May be used by Relay 1."""
  traceEdge(
    """The method to use when ordering `Trace`."""
    orderBy: [TracesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TracesEdge
}

"""All input for the `archiveTrace` mutation."""
input ArchiveTraceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
  archived: Boolean!
}

"""The output of our `archiveTrace` mutation."""
type ArchiveTracePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  trace: Trace

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Workflow` that is related to this `Trace`."""
  workflow: Workflow

  """An edge for our `Trace`. May be used by Relay 1."""
  traceEdge(
    """The method to use when ordering `Trace`."""
    orderBy: [TracesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TracesEdge
}

"""All input for the `archiveWorkflow` mutation."""
input ArchiveWorkflowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
  archived: Boolean!
}

"""The output of our `archiveWorkflow` mutation."""
type ArchiveWorkflowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  workflow: Workflow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Workflow`. May be used by Relay 1."""
  workflowEdge(
    """The method to use when ordering `Workflow`."""
    orderBy: [WorkflowsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkflowsEdge
}

"""All input for the `assignActionToGroup` mutation."""
input AssignActionToGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: BigInt
  actionKey: String
}

"""The output of our `assignActionToGroup` mutation."""
type AssignActionToGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Workflow` that is related to this `Group`."""
  workflow: Workflow

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

enum AttestationType {
  FREE
  OWNED
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """Not included in the specified list."""
  notIn: [BigFloat!]

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""
A filter to be used against BigInt List fields. All fields are combined with a logical ‘and.’
"""
input BigIntListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [BigInt]

  """Not equal to the specified value."""
  notEqualTo: [BigInt]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [BigInt]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [BigInt]

  """Less than the specified value."""
  lessThan: [BigInt]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [BigInt]

  """Greater than the specified value."""
  greaterThan: [BigInt]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [BigInt]

  """Contains the specified list of values."""
  contains: [BigInt]

  """Contained by the specified list of values."""
  containedBy: [BigInt]

  """Overlaps the specified list of values."""
  overlaps: [BigInt]

  """Any array item is equal to the specified value."""
  anyEqualTo: BigInt

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: BigInt

  """Any array item is less than the specified value."""
  anyLessThan: BigInt

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: BigInt

  """Any array item is greater than the specified value."""
  anyGreaterThan: BigInt

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: BigInt
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""All input for the `createGroup` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  group: GroupInputRecordInput
}

"""The output of our `createGroup` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Workflow` that is related to this `Group`."""
  workflow: Workflow

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

input CreateLinkInput {
  """The link to be created"""
  link: JSON!

  """The data associated with the link"""
  data: JSON

  """A list of account IDs to be notified by the link creation"""
  notifyAccountIds: [BigInt!]

  """Nofication object to send custom notifications"""
  notify: NotificationsInput
}

type CreateLinkPayload {
  query: Query
  trace: Trace!
  stages: [Stage!]!
}

"""Reponse of the create links mutation"""
type CreateLinksPayload {
  """The links that have been created"""
  links: [Link!]
}

"""All input for the `createWorkflow` mutation."""
input CreateWorkflowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  workflow: WorkflowInputRecordInput
}

"""The output of our `createWorkflow` mutation."""
type CreateWorkflowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  workflow: Workflow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Workflow`. May be used by Relay 1."""
  workflowEdge(
    """The method to use when ordering `Workflow`."""
    orderBy: [WorkflowsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkflowsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

input DeleteWorkflowInput {
  """The ID of the workflow to be deleted"""
  workflowRowId: BigInt!
}

type DeleteWorkflowPayload {
  deletedWorkflowRowId: BigInt
}

"""The documentation for the workflow."""
type Documentation {
  """The url of the documentation."""
  url: String

  """Object representing the documentation as a file."""
  file: File
}

"""
A filter to be used against `Documentation` object types. All fields are combined with a logical ‘and.’
"""
input DocumentationFilter {
  """Filter by the object’s `url` field."""
  url: StringFilter

  """Filter by the object’s `file` field."""
  file: FileFilter

  """Checks for all expressions in this list."""
  and: [DocumentationFilter!]

  """Checks for any expressions in this list."""
  or: [DocumentationFilter!]

  """Negates the expression."""
  not: DocumentationFilter
}

"""An input for mutations affecting `Documentation`"""
input DocumentationInput {
  """The url of the documentation."""
  url: String

  """Object representing the documentation as a file."""
  file: FileInput
}

"""All input for the `editGroupMembership` mutation."""
input EditGroupMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: BigInt
  memberId: BigInt
  grantOrRevoke: EditMembershipActionType
  role: RoleType
}

"""The output of our `editGroupMembership` mutation."""
type EditGroupMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Workflow` that is related to this `Group`."""
  workflow: Workflow

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""The type of action that can be done on a membership."""
enum EditMembershipActionType {
  GRANT
  REVOKE
}

"""All input for the `editWorkflowMembership` mutation."""
input EditWorkflowMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  workflowId: BigInt
  memberId: BigInt
  grantOrRevoke: EditMembershipActionType
  role: RoleType
}

"""The output of our `editWorkflowMembership` mutation."""
type EditWorkflowMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  workflow: Workflow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Workflow`. May be used by Relay 1."""
  workflowEdge(
    """The method to use when ordering `Workflow`."""
    orderBy: [WorkflowsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkflowsEdge
}

"""
Evidences can be used to externally verify a link's existence at a given 
moment in time.
An evidence can be a proof of inclusion in a public blockchain, a timestamp
signed by a trusted authority or anything that you trust to provide an immutable
ordering of your process' steps.

"""
type Evidence implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  linkHash: String

  """Provider of the evidence. e.g. bitcoin testnet."""
  provider: String!

  """The time at which the evidence was created."""
  createdAt: Datetime!

  """The time at which the evidence was last updated."""
  updatedAt: Datetime!

  """The evidence data."""
  data: JSON!

  """The evidence proof."""
  proof: JSON

  """The evidence backend."""
  backend: JSON
}

"""
A filter to be used against `Evidence` object types. All fields are combined with a logical ‘and.’
"""
input EvidenceFilter {
  """Filter by the object’s `provider` field."""
  provider: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `data` field."""
  data: JSONFilter

  """Checks for all expressions in this list."""
  and: [EvidenceFilter!]

  """Checks for any expressions in this list."""
  or: [EvidenceFilter!]

  """Negates the expression."""
  not: EvidenceFilter
}

"""A connection to a list of `Evidence` values."""
type EvidencesConnection {
  """A list of `Evidence` objects."""
  nodes: [Evidence]!

  """
  A list of edges which contains the `Evidence` and cursor to aid in pagination.
  """
  edges: [EvidencesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Evidence` you could get from the connection."""
  totalCount: Int!
}

"""A `Evidence` edge in the connection."""
type EvidencesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Evidence` at the end of the edge."""
  node: Evidence
}

"""A file object."""
type File {
  """The digest of the file."""
  digest: String

  """Size of file in bytes."""
  size: JSON

  """The name of the file."""
  name: JSON
}

"""
A filter to be used against `File` object types. All fields are combined with a logical ‘and.’
"""
input FileFilter {
  """Filter by the object’s `digest` field."""
  digest: StringFilter

  """Checks for all expressions in this list."""
  and: [FileFilter!]

  """Checks for any expressions in this list."""
  or: [FileFilter!]

  """Negates the expression."""
  not: FileFilter
}

"""An input for mutations affecting `File`"""
input FileInput {
  """The digest of the file."""
  digest: String
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

type Form {
  """The id of the form."""
  rowId: BigInt

  """The name of the stage of the form."""
  stageName: String

  """The title of the form."""
  title: String

  """The description of the form."""
  description: String

  """The JSON schema of the form."""
  schema: JSON

  """The UI schema of the form."""
  uiSchema: JSON

  """Flags if the form has been used at least once."""
  isUsed: Boolean

  """The icon attached to the form."""
  icon: String

  """The time when the form was created."""
  createdAt: Datetime

  """The time when the form was last updated."""
  updatedAt: Datetime

  """The id of the workflow the form belongs to."""
  workflowId: BigInt

  """The version number of the form."""
  version: BigInt

  """Denotes whether or not this is the active version of the form."""
  active: Boolean

  """The identifier shared across all versions of a form."""
  identifier: BigInt

  """Is the current user allowed to use this form."""
  canUse: Boolean @deprecated(reason: "Use actions instead")

  """Groups which can use this form."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection! @deprecated(reason: "Use action.groups instead")

  """The workflow of the form."""
  workflow: Workflow @deprecated(reason: "Use action.workflow instead")
  id: ID!
}

"""
A filter to be used against `Form` object types. All fields are combined with a logical ‘and.’
"""
input FormFilter {
  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Filter by the object’s `stageName` field."""
  stageName: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `schema` field."""
  schema: JSONFilter

  """Filter by the object’s `uiSchema` field."""
  uiSchema: JSONFilter

  """Filter by the object’s `isUsed` field."""
  isUsed: BooleanFilter

  """Filter by the object’s `icon` field."""
  icon: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `workflowId` field."""
  workflowId: BigIntFilter

  """Filter by the object’s `version` field."""
  version: BigIntFilter

  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Filter by the object’s `identifier` field."""
  identifier: BigIntFilter

  """Filter by the object’s `canUse` field."""
  canUse: BooleanFilter

  """Checks for all expressions in this list."""
  and: [FormFilter!]

  """Checks for any expressions in this list."""
  or: [FormFilter!]

  """Negates the expression."""
  not: FormFilter
}

"""A connection to a list of `Form` values."""
type FormsConnection {
  """A list of `Form` objects."""
  nodes: [Form]!

  """
  A list of edges which contains the `Form` and cursor to aid in pagination.
  """
  edges: [FormsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection."""
type FormsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form
}

"""A Trace group."""
type Group implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id of the group."""
  rowId: BigInt!

  """The id of the workflow the group belongs to."""
  workflowId: BigInt!

  """The time when the group was created."""
  createdAt: Datetime!

  """The time when the group was last updated."""
  updatedAt: Datetime!

  """The group label."""
  label: String!

  """Name of the group"""
  name: String!

  """Avatar of the group"""
  avatar: String

  """Reads a single `Workflow` that is related to this `Group`."""
  workflow: Workflow

  """Reads and enables pagination through a set of `Link`."""
  links(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Link`."""
    orderBy: [LinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkFilter
  ): LinksConnection!

  """Reads and enables pagination through a set of `Stage`."""
  stages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StageFilter
  ): StagesConnection!

  """Actions usable for this group"""
  actions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection!

  """Can the current user perform an action for this group"""
  canAct: Boolean

  """Is the current user allowed to update this group."""
  canUpdate: Boolean

  """Forms usable for this group."""
  forms(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter
  ): FormsConnection! @deprecated(reason: "Use group.actions instead")

  """Reads and enables pagination through a set of `GroupMember`."""
  members(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupMemberFilter
  ): GroupMembersConnection!
  ownerId: BigInt @deprecated(reason: "Ownership is getting deprecated, use group.members instead")

  """The owner of the group."""
  owner: Account_Account @deprecated(reason: "Ownership is getting deprecated, use group.members instead")
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt

  """Checks for equality with the object’s `workflowId` field."""
  workflowId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `avatar` field."""
  avatar: String
}

"""Group of traces indexed by a value of their state."""
type GroupedTrace {
  """The state attribute common to this group of traces"""
  index: String

  """The group of traces matching the index."""
  traces(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TraceFilter

    """Custom Filter"""
    customFilter: TraceCustomFilter
  ): TracesConnection!
  id: ID!
}

"""
A filter to be used against `GroupedTrace` object types. All fields are combined with a logical ‘and.’
"""
input GroupedTraceFilter {
  """Filter by the object’s `index` field."""
  index: StringFilter

  """Checks for all expressions in this list."""
  and: [GroupedTraceFilter!]

  """Checks for any expressions in this list."""
  or: [GroupedTraceFilter!]

  """Negates the expression."""
  not: GroupedTraceFilter
}

"""A connection to a list of `GroupedTrace` values."""
type GroupedTracesConnection {
  """A list of `GroupedTrace` objects."""
  nodes: [GroupedTrace]!

  """
  A list of edges which contains the `GroupedTrace` and cursor to aid in pagination.
  """
  edges: [GroupedTracesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GroupedTrace` you could get from the connection."""
  totalCount: Int!
}

"""A `GroupedTrace` edge in the connection."""
type GroupedTracesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupedTrace` at the end of the edge."""
  node: GroupedTrace
}

"""Group of traces indexed by a value of their state."""
type GroupedTraceState {
  """The state attribute common to this group of traces"""
  index: String

  """The group of trace states matching the index."""
  traceStates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TraceStateFilter

    """Used to order workflow traces"""
    orderBy: [TraceStatesOrderByPath!]
  ): TraceStatesConnection!
}

"""
A filter to be used against `GroupedTraceState` object types. All fields are combined with a logical ‘and.’
"""
input GroupedTraceStateFilter {
  """Filter by the object’s `index` field."""
  index: StringFilter

  """Checks for all expressions in this list."""
  and: [GroupedTraceStateFilter!]

  """Checks for any expressions in this list."""
  or: [GroupedTraceStateFilter!]

  """Negates the expression."""
  not: GroupedTraceStateFilter
}

"""A connection to a list of `GroupedTraceState` values."""
type GroupedTraceStatesConnection {
  """A list of `GroupedTraceState` objects."""
  nodes: [GroupedTraceState]!

  """
  A list of edges which contains the `GroupedTraceState` and cursor to aid in pagination.
  """
  edges: [GroupedTraceStatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GroupedTraceState` you could get from the connection.
  """
  totalCount: Int!
}

"""A `GroupedTraceState` edge in the connection."""
type GroupedTraceStatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupedTraceState` at the end of the edge."""
  node: GroupedTraceState
}

"""
A filter to be used against `Group` object types. All fields are combined with a logical ‘and.’
"""
input GroupFilter {
  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Filter by the object’s `workflowId` field."""
  workflowId: BigIntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `label` field."""
  label: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `avatar` field."""
  avatar: StringFilter

  """Filter by the object’s `canAct` field."""
  canAct: BooleanFilter

  """Filter by the object’s `canUpdate` field."""
  canUpdate: BooleanFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: BigIntFilter

  """Checks for all expressions in this list."""
  and: [GroupFilter!]

  """Checks for any expressions in this list."""
  or: [GroupFilter!]

  """Negates the expression."""
  not: GroupFilter
}

"""An input for mutations affecting `GroupInputRecord`"""
input GroupInputRecordInput {
  """The ID of the workflow the group belongs to."""
  workflowId: BigInt

  """The Account ID of the organization or group that owns the group."""
  ownerId: BigInt

  """The group label."""
  label: String

  """The group name."""
  name: String

  """The group avatar."""
  avatar: String
}

type GroupMember {
  """Account id in Stratumn account."""
  accountId: BigInt

  """Is the member a reader."""
  reader: Boolean

  """Is the member an admin."""
  admin: Boolean

  """The account of the member entity."""
  account: Account_Account
}

"""
A filter to be used against `GroupMember` object types. All fields are combined with a logical ‘and.’
"""
input GroupMemberFilter {
  """Filter by the object’s `accountId` field."""
  accountId: BigIntFilter

  """Filter by the object’s `reader` field."""
  reader: BooleanFilter

  """Filter by the object’s `admin` field."""
  admin: BooleanFilter

  """Checks for all expressions in this list."""
  and: [GroupMemberFilter!]

  """Checks for any expressions in this list."""
  or: [GroupMemberFilter!]

  """Negates the expression."""
  not: GroupMemberFilter
}

"""A connection to a list of `GroupMember` values."""
type GroupMembersConnection {
  """A list of `GroupMember` objects."""
  nodes: [GroupMember]!

  """
  A list of edges which contains the `GroupMember` and cursor to aid in pagination.
  """
  edges: [GroupMembersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GroupMember` you could get from the connection."""
  totalCount: Int!
}

"""A `GroupMember` edge in the connection."""
type GroupMembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupMember` at the end of the edge."""
  node: GroupMember
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  """Name of the group"""
  name: String

  """Avatar of the group"""
  avatar: String
}

"""A connection to a list of `Group` values."""
type GroupsConnection {
  """A list of `Group` objects."""
  nodes: [Group]!

  """
  A list of edges which contains the `Group` and cursor to aid in pagination.
  """
  edges: [GroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection."""
type GroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  WORKFLOW_ID_ASC
  WORKFLOW_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  LABEL_ASC
  LABEL_DESC
  NAME_ASC
  NAME_DESC
  AVATAR_ASC
  AVATAR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `inviteUsersToGroup` mutation."""
input InviteUsersToGroupInput {
  emails: [String]!
  groupRowId: BigInt!
}

"""The output of our `inviteUsersToGroup` mutation."""
type InviteUsersToGroupPayload {
  group: Group
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Used to filter workflow traces states"""
input JSONDeepFilter {
  type: String!
  path: String!
  value: [String!]
  format: String
  inputFormat: String
}

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

"""A Chainscript link."""
type Link implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The height of the link (link.meta.priority)."""
  height: Float!

  """The id of the link's trace."""
  traceId: String!

  """The list of tags of the link."""
  tags: [String]

  """The id of the link' workflow."""
  workflowId: String!

  """The time at which the link was created."""
  createdAt: Datetime!

  """The raw link data."""
  raw: JSON!

  """The stage of the link (link.meta.process.state)."""
  processState: ProcessState!

  """The last form that was used to attest (link.meta.data.lastFormId)."""
  lastFormId: String

  """The group of the link (link.meta.data.groupId)"""
  groupId: BigInt!

  """
  The ID of the user who created the link, if the link was created by a user.
  """
  createdByUserId: BigInt @deprecated(reason: "Use createdByAccountId instead")

  """The list of inputs used for this action (link.meta.data.inputs)."""
  inputs: [BigInt]

  """The configuration with which the link has been created"""
  configId: BigInt

  """The key of the workflow action used by the link"""
  actionKey: String

  """The ID of the account used to create the link."""
  createdByAccountId: BigInt

  """Reads a single `Group` that is related to this `Link`."""
  group: Group

  """Reads a single `WorkflowConfig` that is related to this `Link`."""
  config: WorkflowConfig

  """The workflow action used by the link"""
  action: Action

  """
  The ID of the user who created the link, if the link was created by a user.
  """
  createdById: BigInt! @deprecated(reason: "Use createdByAccountId instead")

  """The data in the link (link.data)."""
  data: JSON

  """The list of evidences of a link."""
  evidences(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EvidenceFilter
  ): EvidencesConnection!

  """The form used by the link"""
  form: Form @deprecated(reason: "true")
  formId: BigInt

  """The hash of the link."""
  linkHash: String

  """The list of the groups to which the ownership can be transfered."""
  nextGroups: [Group]!

  """The hash of the previous link."""
  prevLinkHash: String

  """Links referencing this link"""
  referencedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkFilter
  ): LinksConnection!

  """Links this link references"""
  references(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkFilter
  ): LinksConnection!
  trace: Trace

  """
  The workflow of the link
  
  """
  workflow: Workflow!
  createdBy: Account_User @deprecated(reason: "Use createdByAccount instead")
  createdByAccount: Account_Account
}

"""
A condition to be used against `Link` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LinkCondition {
  """Checks for equality with the object’s `height` field."""
  height: Float

  """Checks for equality with the object’s `traceId` field."""
  traceId: String

  """Checks for equality with the object’s `tags` field."""
  tags: [String]

  """Checks for equality with the object’s `workflowId` field."""
  workflowId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `raw` field."""
  raw: JSON

  """Checks for equality with the object’s `processState` field."""
  processState: ProcessState

  """Checks for equality with the object’s `lastFormId` field."""
  lastFormId: String

  """Checks for equality with the object’s `groupId` field."""
  groupId: BigInt

  """Checks for equality with the object’s `createdByUserId` field."""
  createdByUserId: BigInt

  """Checks for equality with the object’s `inputs` field."""
  inputs: [BigInt]

  """Checks for equality with the object’s `actionKey` field."""
  actionKey: String

  """Checks for equality with the object’s `createdByAccountId` field."""
  createdByAccountId: BigInt
}

"""
A filter to be used against `Link` object types. All fields are combined with a logical ‘and.’
"""
input LinkFilter {
  """Filter by the object’s `height` field."""
  height: FloatFilter

  """Filter by the object’s `traceId` field."""
  traceId: StringFilter

  """Filter by the object’s `tags` field."""
  tags: StringListFilter

  """Filter by the object’s `workflowId` field."""
  workflowId: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `raw` field."""
  raw: JSONFilter

  """Filter by the object’s `processState` field."""
  processState: ProcessStateFilter

  """Filter by the object’s `lastFormId` field."""
  lastFormId: StringFilter

  """Filter by the object’s `groupId` field."""
  groupId: BigIntFilter

  """Filter by the object’s `createdByUserId` field."""
  createdByUserId: BigIntFilter

  """Filter by the object’s `inputs` field."""
  inputs: BigIntListFilter

  """Filter by the object’s `actionKey` field."""
  actionKey: StringFilter

  """Filter by the object’s `createdByAccountId` field."""
  createdByAccountId: BigIntFilter

  """Filter by the object’s `createdById` field."""
  createdById: BigIntFilter

  """Filter by the object’s `formId` field."""
  formId: BigIntFilter

  """Filter by the object’s `linkHash` field."""
  linkHash: StringFilter

  """Filter by the object’s `prevLinkHash` field."""
  prevLinkHash: StringFilter

  """Checks for all expressions in this list."""
  and: [LinkFilter!]

  """Checks for any expressions in this list."""
  or: [LinkFilter!]

  """Negates the expression."""
  not: LinkFilter
}

"""A connection to a list of `Link` values."""
type LinksConnection {
  """A list of `Link` objects."""
  nodes: [Link]!

  """
  A list of edges which contains the `Link` and cursor to aid in pagination.
  """
  edges: [LinksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Link` you could get from the connection."""
  totalCount: Int!
}

"""A `Link` edge in the connection."""
type LinksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Link` at the end of the edge."""
  node: Link
}

"""Methods to use when ordering `Link`."""
enum LinksOrderBy {
  NATURAL
  HEIGHT_ASC
  HEIGHT_DESC
  TRACE_ID_ASC
  TRACE_ID_DESC
  TAGS_ASC
  TAGS_DESC
  WORKFLOW_ID_ASC
  WORKFLOW_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  RAW_ASC
  RAW_DESC
  PROCESS_STATE_ASC
  PROCESS_STATE_DESC
  LAST_FORM_ID_ASC
  LAST_FORM_ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  CREATED_BY_USER_ID_ASC
  CREATED_BY_USER_ID_DESC
  INPUTS_ASC
  INPUTS_DESC
  ACTION_KEY_ASC
  ACTION_KEY_DESC
  CREATED_BY_ACCOUNT_ID_ASC
  CREATED_BY_ACCOUNT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Updates a single `Group` using its globally unique id and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroupByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByRowIdInput!
  ): UpdateGroupPayload

  """Updates a single `Workflow` using its globally unique id and a patch."""
  updateWorkflow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWorkflowInput!
  ): UpdateWorkflowPayload

  """Updates a single `Workflow` using a unique key and a patch."""
  updateWorkflowByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWorkflowByRowIdInput!
  ): UpdateWorkflowPayload

  """
  Updates a single `WorkflowConfig` using its globally unique id and a patch.
  """
  updateWorkflowConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWorkflowConfigInput!
  ): UpdateWorkflowConfigPayload

  """Updates a single `WorkflowConfig` using a unique key and a patch."""
  updateWorkflowConfigByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWorkflowConfigByRowIdInput!
  ): UpdateWorkflowConfigPayload

  """Adds multiple tags to a trace."""
  addTagsToTrace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddTagsToTraceInput!
  ): AddTagsToTracePayload

  """Archive a trace for the current user."""
  archiveTrace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ArchiveTraceInput!
  ): ArchiveTracePayload

  """Archive a workflow for the current user."""
  archiveWorkflow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ArchiveWorkflowInput!
  ): ArchiveWorkflowPayload

  """Assign a workflow action to a group"""
  assignActionToGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AssignActionToGroupInput!
  ): AssignActionToGroupPayload

  """Creates a single `Group`"""
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """Creates a single `Workflow`"""
  createWorkflow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWorkflowInput!
  ): CreateWorkflowPayload

  """To edit the memberships of a group."""
  editGroupMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: EditGroupMembershipInput!
  ): EditGroupMembershipPayload

  """To edit the memberships of a workflow."""
  editWorkflowMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: EditWorkflowMembershipInput!
  ): EditWorkflowMembershipPayload

  """
  Creates a new configuration for a workflow and deprecates the previous one (if any).
  """
  newWorkflowConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: NewWorkflowConfigInput!
  ): NewWorkflowConfigPayload

  """Removes multiple tags from a trace."""
  removeTagsFromTrace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveTagsFromTraceInput!
  ): RemoveTagsFromTracePayload

  """To update members of a group."""
  updateGroupMembers(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupMembersInput!
  ): UpdateGroupMembersPayload

  """Updates the documentation of a workflow."""
  updateWorkflowDocumentationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWorkflowDocumentationByRowIdInput!
  ): UpdateWorkflowDocumentationByRowIdPayload

  """Watch a trace for the current user."""
  watchTrace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: WatchTraceInput!
  ): WatchTracePayload
  createLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLinkInput!
  ): CreateLinkPayload
  createLinks(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: [CreateLinkInput!]
  ): CreateLinksPayload

  """
  Add users to specified group, throught their email addresses. If needed, we
  will create a new Account & invite customer to claim it.
  """
  inviteUsersToGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InviteUsersToGroupInput!
  ): InviteUsersToGroupPayload
  deleteWorkflow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWorkflowInput!
  ): DeleteWorkflowPayload
}

"""All input for the `newWorkflowConfig` mutation."""
input NewWorkflowConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  config: NewWorkflowConfigInputRecordInput!
}

"""An input for mutations affecting `NewWorkflowConfigInputRecord`"""
input NewWorkflowConfigInputRecordInput {
  """The id of the workflow related to the config."""
  workflowRowId: BigInt!

  """The initial state of traces in this workflow."""
  initState: JSON

  """The possible actions to start a trace."""
  initActions: JSON

  """The json-schema definition of the trace state."""
  stateSchema: JSON

  """
  The definition of all actions of a workflow. They should embed the forms and the effects for each action.
  """
  actions: JSON

  """
  The migration that will run upon creating this workflow config entry (optional).
  """
  migration: JSON

  """True to allow actions to be performed by bots, false to deny them."""
  allowAutomation: Boolean

  """
  DSL definitions that can be referenced from other parts of the configuration.
  """
  definitions: JSON

  """
  Describes the transitions between actions that are allowed on the workflow.
  """
  transitions: JSON

  """Reporting-specific workflow configuration."""
  reporting: JSON
}

"""The output of our `newWorkflowConfig` mutation."""
type NewWorkflowConfigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  workflowConfig: WorkflowConfig

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Workflow` that is related to this `WorkflowConfig`."""
  workflow: Workflow
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

input NotificationsInput {
  """A list of account IDs to be notified by the link creation"""
  accountIds: [BigInt!]

  """Custom json to be sent to all recipients"""
  data: JSON

  """Custom title to be sent to all recipients, overrides default"""
  title: String

  """Custom message to be sent to all recipients, overrides default"""
  message: String
}

enum OrderByDirection {
  ASC
  DESC
}

enum OrderDirection {
  ASC
  DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""A connection to a list of `Priority` values."""
type PrioritiesConnection {
  """A list of `Priority` objects."""
  nodes: [Priority]!

  """
  A list of edges which contains the `Priority` and cursor to aid in pagination.
  """
  edges: [PrioritiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Priority` you could get from the connection."""
  totalCount: Int!
}

"""A `Priority` edge in the connection."""
type PrioritiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Priority` at the end of the edge."""
  node: Priority
}

"""Methods to use when ordering `Priority`."""
enum PrioritiesOrderBy {
  NATURAL
  TRACE_MAP_ID_ASC
  TRACE_MAP_ID_DESC
  WORKFLOW_ID_ASC
  WORKFLOW_ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  RESPONSIBILITY_ASC
  RESPONSIBILITY_DESC
  INVESTMENT_ASC
  INVESTMENT_DESC
  URGENCY_ASC
  URGENCY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ALL_DESC
}

type Priority implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The affected trace"""
  traceMapId: UUID!

  """The affected workflow"""
  workflowId: BigInt!

  """The affected group"""
  groupId: BigInt!

  """Determines how responsible the group is in regards to handling a trace"""
  responsibility: BigFloat!

  """Determines the level of involvement a group has had on a trace"""
  investment: BigFloat!

  """Determines the level of urgency of a trace"""
  urgency: BigFloat!

  """Reads a single `Workflow` that is related to this `Priority`."""
  workflow: Workflow

  """Reads a single `Group` that is related to this `Priority`."""
  group: Group
  trace: Trace
}

"""
A filter to be used against `Priority` object types. All fields are combined with a logical ‘and.’
"""
input PriorityFilter {
  """Filter by the object’s `traceMapId` field."""
  traceMapId: UUIDFilter

  """Filter by the object’s `workflowId` field."""
  workflowId: BigIntFilter

  """Filter by the object’s `groupId` field."""
  groupId: BigIntFilter

  """Filter by the object’s `responsibility` field."""
  responsibility: BigFloatFilter

  """Filter by the object’s `investment` field."""
  investment: BigFloatFilter

  """Filter by the object’s `urgency` field."""
  urgency: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [PriorityFilter!]

  """Checks for any expressions in this list."""
  or: [PriorityFilter!]

  """Negates the expression."""
  not: PriorityFilter
}

enum ProcessState {
  OWNED
  FREE
  PUSHING
  PULLING
}

"""
A filter to be used against ProcessState fields. All fields are combined with a logical ‘and.’
"""
input ProcessStateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: ProcessState

  """Not equal to the specified value."""
  notEqualTo: ProcessState

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ProcessState

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ProcessState

  """Included in the specified list."""
  in: [ProcessState!]

  """Not included in the specified list."""
  notIn: [ProcessState!]

  """Less than the specified value."""
  lessThan: ProcessState

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ProcessState

  """Greater than the specified value."""
  greaterThan: ProcessState

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ProcessState
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `Workflow`."""
  workflows(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Workflow`."""
    orderBy: [WorkflowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorkflowCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorkflowFilter
  ): WorkflowsConnection
  groupByRowId(rowId: BigInt!): Group
  priorityByTraceMapIdAndGroupId(traceMapId: UUID!, groupId: BigInt!): Priority
  stageByRowId(rowId: BigInt!): Stage
  workflowByRowId(rowId: BigInt!): Workflow
  workflowConfigByRowId(rowId: BigInt!): WorkflowConfig

  """Returns the latest version of a form given its identifier."""
  formByIdentifier(identifier: BigInt): Form @deprecated(reason: "Use workflow.action_by_key instead")

  """Returns the latest version of a form given its id."""
  formByRowId(rowId: BigInt): Form @deprecated(reason: "Use workflow.action_by_key instead")

  """The numeric priorities of a trace for a group"""
  priorities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Priority`."""
    orderBy: [PrioritiesOrderBy!]

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PriorityFilter
  ): PrioritiesConnection
  traceById(id: UUID): Trace

  """Reads a single `Link` using its globally unique `ID`."""
  link(
    """The globally unique `ID` to be used in selecting a single `Link`."""
    id: ID!
  ): Link

  """Reads a single `Group` using its globally unique `ID`."""
  group(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    id: ID!
  ): Group

  """Reads a single `Priority` using its globally unique `ID`."""
  priority(
    """The globally unique `ID` to be used in selecting a single `Priority`."""
    id: ID!
  ): Priority

  """Reads a single `Stage` using its globally unique `ID`."""
  stage(
    """The globally unique `ID` to be used in selecting a single `Stage`."""
    id: ID!
  ): Stage

  """Reads a single `Trace` using its globally unique `ID`."""
  trace(
    """The globally unique `ID` to be used in selecting a single `Trace`."""
    id: ID!
  ): Trace

  """Reads a single `Workflow` using its globally unique `ID`."""
  workflow(
    """The globally unique `ID` to be used in selecting a single `Workflow`."""
    id: ID!
  ): Workflow

  """Reads a single `WorkflowConfig` using its globally unique `ID`."""
  workflowConfig(
    """
    The globally unique `ID` to be used in selecting a single `WorkflowConfig`.
    """
    id: ID!
  ): WorkflowConfig

  """Initialize link for attestation"""
  initAttestationLink(traceId: UUID, action: String, formId: BigInt, formIdentifier: BigInt, groupId: BigInt!, formData: JSON, refs: [Ref!], type: AttestationType, tags: [String!], hashed: Boolean): JSON!

  """Initialize link for transfer of ownership request"""
  initTransferRequest(traceId: UUID!, to: BigInt!, action: TransferRequestAction!, formData: JSON, tags: [String!], hashed: Boolean): JSON! @deprecated(reason: "Transfer of ownership now uses regular actions. Please use initAttestationLink instead.")

  """
  Initialize link for accept/reject/cancel transfer of ownership response
  """
  initTransferResponse(traceId: UUID!, action: TransferResponseAction!, formData: JSON, tags: [String!], hashed: Boolean): JSON! @deprecated(reason: "Transfer of ownership now uses regular actions. Please use initAttestationLink instead.")

  """Current user information"""
  me: Account_User

  """Current user account information"""
  myAccount: Account_Account
}

"""Reference to another link in Trace"""
input Ref {
  """Workflow id of the link that is being referenced"""
  workflowId: BigInt!

  """Hex encoded linkHash"""
  linkHash: String!
}

"""All input for the `removeTagsFromTrace` mutation."""
input RemoveTagsFromTraceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  traceRowId: UUID
  tags: [String]
}

"""The output of our `removeTagsFromTrace` mutation."""
type RemoveTagsFromTracePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  trace: Trace

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Workflow` that is related to this `Trace`."""
  workflow: Workflow

  """An edge for our `Trace`. May be used by Relay 1."""
  traceEdge(
    """The method to use when ordering `Trace`."""
    orderBy: [TracesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TracesEdge
}

"""The role type."""
enum RoleType {
  ADMIN
  READER
}

"""A Trace stage."""
type Stage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id of the stage."""
  rowId: BigInt!

  """The id of the group the stage belongs to."""
  groupId: BigInt!

  """The label of the stage."""
  label: String!

  """The type of the stage."""
  type: StageType!

  """The time when the stage was created."""
  createdAt: Datetime!

  """The time when the stage was last updated."""
  updatedAt: Datetime!
  actionKey: String

  """Reads a single `Group` that is related to this `Stage`."""
  group: Group

  """The action assigned to the stage"""
  action: Action

  """Is the current user allowed to create a trace in this stage."""
  canCreateTrace: Boolean

  """The form of the stage."""
  form: Form @deprecated(reason: "Use stage.action instead")

  """The ID of the form of the stage."""
  formId: BigInt @deprecated(reason: "Use stage.action_key instead")

  """The identifier of the form of the stage."""
  formIdentifier: BigInt @deprecated(reason: "Use stage.action_key instead")

  """Traces that are currently in this stage."""
  traces(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TraceFilter

    """Custom Filter"""
    customFilter: TraceCustomFilter
  ): TracesConnection!
}

"""
A condition to be used against `Stage` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input StageCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt

  """Checks for equality with the object’s `groupId` field."""
  groupId: BigInt

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `type` field."""
  type: StageType

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `actionKey` field."""
  actionKey: String

  """The ID of the form of the stage"""
  formId: BigInt

  """The identifier of the form of the stage"""
  formIdentifier: BigInt
}

"""
A filter to be used against `Stage` object types. All fields are combined with a logical ‘and.’
"""
input StageFilter {
  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Filter by the object’s `groupId` field."""
  groupId: BigIntFilter

  """Filter by the object’s `label` field."""
  label: StringFilter

  """Filter by the object’s `type` field."""
  type: StageTypeFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `actionKey` field."""
  actionKey: StringFilter

  """Filter by the object’s `canCreateTrace` field."""
  canCreateTrace: BooleanFilter

  """Filter by the object’s `formId` field."""
  formId: BigIntFilter

  """Filter by the object’s `formIdentifier` field."""
  formIdentifier: BigIntFilter

  """Checks for all expressions in this list."""
  and: [StageFilter!]

  """Checks for any expressions in this list."""
  or: [StageFilter!]

  """Negates the expression."""
  not: StageFilter
}

"""A connection to a list of `Stage` values."""
type StagesConnection {
  """A list of `Stage` objects."""
  nodes: [Stage]!

  """
  A list of edges which contains the `Stage` and cursor to aid in pagination.
  """
  edges: [StagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Stage` you could get from the connection."""
  totalCount: Int!
}

"""A `Stage` edge in the connection."""
type StagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Stage` at the end of the edge."""
  node: Stage
}

"""Methods to use when ordering `Stage`."""
enum StagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  LABEL_ASC
  LABEL_DESC
  TYPE_ASC
  TYPE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ACTION_KEY_ASC
  ACTION_KEY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A stage type enum."""
enum StageType {
  INCOMING
  BACKLOG
  OUTGOING
  ATTESTATION
}

"""
A filter to be used against StageType fields. All fields are combined with a logical ‘and.’
"""
input StageTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: StageType

  """Not equal to the specified value."""
  notEqualTo: StageType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: StageType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: StageType

  """Included in the specified list."""
  in: [StageType!]

  """Not included in the specified list."""
  notIn: [StageType!]

  """Less than the specified value."""
  lessThan: StageType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: StageType

  """Greater than the specified value."""
  greaterThan: StageType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: StageType
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """Contains the specified list of values."""
  contains: [String]

  """Contained by the specified list of values."""
  containedBy: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]

  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String
}

"""A trace."""
type Trace implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id of the workflow the trace belongs to."""
  workflowId: BigInt!

  """The time when the trace was created."""
  createdAt: Datetime!

  """The time when the trace was last updated."""
  updatedAt: Datetime!

  """The list of tags of the link."""
  tags: [String]

  """The user friendly name for the trace."""
  name: String

  """Reads a single `Workflow` that is related to this `Trace`."""
  workflow: Workflow

  """The user archived flag."""
  archived: Boolean

  """Group to which the trace belongs."""
  group: Group

  """Get the head of the trace."""
  head: Link

  """Get the links of the trace."""
  links(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkFilter
  ): LinksConnection!

  """List of the groups to whom a trace can be transferred."""
  nextGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection!

  """The identifier of the trace."""
  rowId: String

  """The short identifier of the trace."""
  shortId: String

  """Stages in which this trace is."""
  stages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StageFilter
  ): StagesConnection!

  """The state of the trace."""
  state: TraceState

  """Get the first link of the trace."""
  tail: Link

  """The user watched flag."""
  watched: Boolean
}

"""
A condition to be used against `Trace` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TraceCondition {
  """Checks for equality with the object’s `workflowId` field."""
  workflowId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `tags` field."""
  tags: [String]

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A customized filter to be used against `Trace` object types. All fields are combined with a logical ‘and.’
"""
input TraceCustomFilter {
  """blah"""
  _: String

  """String in custom filter"""
  byTags: String

  """String in custom filter"""
  byHeadTags: String
}

"""
A filter to be used against `Trace` object types. All fields are combined with a logical ‘and.’
"""
input TraceFilter {
  """Filter by the object’s `workflowId` field."""
  workflowId: BigIntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `tags` field."""
  tags: StringListFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `archived` field."""
  archived: BooleanFilter

  """Filter by the object’s `rowId` field."""
  rowId: StringFilter

  """Filter by the object’s `shortId` field."""
  shortId: StringFilter

  """Filter by the object’s `watched` field."""
  watched: BooleanFilter

  """Checks for all expressions in this list."""
  and: [TraceFilter!]

  """Checks for any expressions in this list."""
  or: [TraceFilter!]

  """Negates the expression."""
  not: TraceFilter
}

"""An input for mutations affecting `TraceFilterByStateDatum`"""
input TraceFilterByStateDatumInput {
  path: String
  value: [String]
  type: String
  format: String
  inputFormat: String
}

"""An input for mutations affecting `TraceOrderByStateDatum`"""
input TraceOrderByStateDatumInput {
  path: String
  direction: OrderByDirection
  type: String
}

"""A connection to a list of `Trace` values."""
type TracesConnection {
  """A list of `Trace` objects."""
  nodes: [Trace]!

  """
  A list of edges which contains the `Trace` and cursor to aid in pagination.
  """
  edges: [TracesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Trace` you could get from the connection."""
  totalCount: Int!
}

"""A `Trace` edge in the connection."""
type TracesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Trace` at the end of the edge."""
  node: Trace
}

"""Methods to use when ordering `Trace`."""
enum TracesOrderBy {
  NATURAL
  WORKFLOW_ID_ASC
  WORKFLOW_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  TAGS_ASC
  TAGS_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The state of a trace."""
type TraceState implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """ID of the state."""
  rowId: BigInt!

  """The ID of the trace."""
  traceId: UUID!
  headLinkHash: String!

  """The data of the trace state."""
  data: JSON!

  """The time when the state was created."""
  createdAt: Datetime!

  """The time when the state was last upadted."""
  updatedAt: Datetime!

  """The next possible actions per group"""
  nextActions: JSON

  """The metadata of the trace state"""
  meta: JSON!
  tasks: JSON

  """The head link of the trace."""
  headLink: Link

  """The trace associated with the state."""
  trace: Trace
}

enum TraceStateColumn {
  DATA
  META
}

"""
A filter to be used against `TraceState` object types. All fields are combined with a logical ‘and.’
"""
input TraceStateFilter {
  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Filter by the object’s `traceId` field."""
  traceId: UUIDFilter

  """Filter by the object’s `data` field."""
  data: JSONFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `nextActions` field."""
  nextActions: JSONFilter

  """Filter by the object’s `meta` field."""
  meta: JSONFilter

  """Filter by the object’s `tasks` field."""
  tasks: JSONFilter

  """Checks for all expressions in this list."""
  and: [TraceStateFilter!]

  """Checks for any expressions in this list."""
  or: [TraceStateFilter!]

  """Negates the expression."""
  not: TraceStateFilter

  """Filter on a value following a path in the data JSON object"""
  dataByPath: JSONDeepFilter

  """Filter on a value following a path in the meta JSON object"""
  metaByPath: JSONDeepFilter
}

"""A connection to a list of `TraceState` values."""
type TraceStatesConnection {
  """A list of `TraceState` objects."""
  nodes: [TraceState]!

  """
  A list of edges which contains the `TraceState` and cursor to aid in pagination.
  """
  edges: [TraceStatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TraceState` you could get from the connection."""
  totalCount: Int!
}

"""A `TraceState` edge in the connection."""
type TraceStatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TraceState` at the end of the edge."""
  node: TraceState
}

"""Used to order workflow traces states"""
input TraceStatesOrderByPath {
  column: TraceStateColumn!
  path: String!
  direction: OrderDirection
}

enum TransferRequestAction {
  _PUSH_OWNERSHIP_
}

enum TransferResponseAction {
  _ACCEPT_TRANSFER_
  _REJECT_TRANSFER_
  _CANCEL_TRANSFER_
}

"""All input for the `updateGroupByRowId` mutation."""
input UpdateGroupByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!

  """The id of the group."""
  rowId: BigInt!
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""An input for mutations affecting `UpdateGroupMemberAction`"""
input UpdateGroupMemberActionInput {
  memberId: BigInt
  action: EditMembershipActionType
  role: RoleType
}

"""All input for the `updateGroupMembers` mutation."""
input UpdateGroupMembersInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: BigInt
  members: [UpdateGroupMemberActionInput]
}

"""The output of our `updateGroupMembers` mutation."""
type UpdateGroupMembersPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Workflow` that is related to this `Group`."""
  workflow: Workflow

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Workflow` that is related to this `Group`."""
  workflow: Workflow

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""All input for the `updateWorkflowByRowId` mutation."""
input UpdateWorkflowByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Workflow` being updated.
  """
  patch: WorkflowPatch!

  """The id of the workflow."""
  rowId: BigInt!
}

"""All input for the `updateWorkflowConfigByRowId` mutation."""
input UpdateWorkflowConfigByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `WorkflowConfig` being updated.
  """
  patch: WorkflowConfigPatch!

  """ID of the workflow config."""
  rowId: BigInt!
}

"""All input for the `updateWorkflowConfig` mutation."""
input UpdateWorkflowConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WorkflowConfig` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `WorkflowConfig` being updated.
  """
  patch: WorkflowConfigPatch!
}

"""The output of our update `WorkflowConfig` mutation."""
type UpdateWorkflowConfigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `WorkflowConfig` that was updated by this mutation."""
  workflowConfig: WorkflowConfig

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Workflow` that is related to this `WorkflowConfig`."""
  workflow: Workflow
}

"""All input for the `updateWorkflowDocumentationByRowId` mutation."""
input UpdateWorkflowDocumentationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: BigInt
  url: String
  fileDigest: String
}

"""The output of our `updateWorkflowDocumentationByRowId` mutation."""
type UpdateWorkflowDocumentationByRowIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  workflow: Workflow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Workflow`. May be used by Relay 1."""
  workflowEdge(
    """The method to use when ordering `Workflow`."""
    orderBy: [WorkflowsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkflowsEdge
}

"""All input for the `updateWorkflow` mutation."""
input UpdateWorkflowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Workflow` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Workflow` being updated.
  """
  patch: WorkflowPatch!
}

"""The output of our update `Workflow` mutation."""
type UpdateWorkflowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Workflow` that was updated by this mutation."""
  workflow: Workflow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Workflow`. May be used by Relay 1."""
  workflowEdge(
    """The method to use when ordering `Workflow`."""
    orderBy: [WorkflowsOrderBy!] = [PRIMARY_KEY_ASC]
  ): WorkflowsEdge
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""All input for the `watchTrace` mutation."""
input WatchTraceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
  watched: Boolean!
}

"""The output of our `watchTrace` mutation."""
type WatchTracePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  trace: Trace

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Workflow` that is related to this `Trace`."""
  workflow: Workflow

  """An edge for our `Trace`. May be used by Relay 1."""
  traceEdge(
    """The method to use when ordering `Trace`."""
    orderBy: [TracesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TracesEdge
}

"""A Trace workflow."""
type Workflow implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The id of the workflow."""
  rowId: BigInt!

  """The name of the workflow."""
  name: String!

  """The description of the workflow."""
  description: String

  """The time when the workflow was created."""
  createdAt: Datetime!

  """The time when the workflow was last updated."""
  updatedAt: Datetime!

  """Dont't use this its deprecated!"""
  overviewConfig: JSON @deprecated(reason: "Use `WorkflowConfig`.`overview` instead.")

  """The user provided documentation for the workflow."""
  documentation: Documentation

  """jsonb object for workflow configuration"""
  settings: JSON

  """Denotes whether or not this workflow is a draft"""
  draft: Boolean!

  """The ID of the account owning the workflow."""
  ownerId: BigInt!

  """Reads and enables pagination through a set of `Trace`."""
  tracesDeprecated(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Trace`."""
    orderBy: [TracesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TraceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TraceFilter

    """Custom Filter"""
    customFilter: TraceCustomFilter
  ): TracesConnection!

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection!
  accountId: BigInt

  """Gets an action according to its key"""
  actionByKey(key: String): Action

  """Gets the actions of the workflow"""
  actions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection!

  """The user archived flag."""
  archived: Boolean

  """Is the current user allowed to update this workflow."""
  canUpdate: Boolean
  config: WorkflowConfig

  """Returns all of the active forms for this workflow."""
  forms(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter
  ): FormsConnection! @deprecated(reason: "Use workflow.actions instead")

  """
  Returns groups of trace states indexed by value of their state. The "path" argument must use the dot-notation.
  """
  groupedTraceStates(
    path: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupedTraceStateFilter
  ): GroupedTraceStatesConnection!

  """
  Returns groups of traces indexed by value of their state. The "path" argument must use the dot-notation.
  """
  groupedTraces(
    path: String
    orderBy: TraceOrderByStateDatumInput
    filterBy: [TraceFilterByStateDatumInput]

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupedTraceFilter
  ): GroupedTracesConnection!
  isAdmin: Boolean

  """Whether or not the current user is a workflow reader."""
  isReader: Boolean

  """The last migration that was run on the workflow"""
  lastMigration: JSON

  """Get all the links of the workflow"""
  links(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkFilter
  ): LinksConnection!

  """Reads and enables pagination through a set of `WorkflowMember`."""
  members(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorkflowMemberFilter
  ): WorkflowMembersConnection!

  """Gets the raw JSON content of an action as according to its key"""
  rawActionByKey(key: String): JSON

  """List of trace states belonging to this workflow"""
  traceStates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TraceStateFilter

    """Used to order workflow traces"""
    orderBy: [TraceStatesOrderByPath!]
  ): TraceStatesConnection!

  """List of traces belonging to this workflow"""
  traces(
    orderBy: TraceOrderByStateDatumInput
    filterBy: [TraceFilterByStateDatumInput]

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TraceFilter

    """Custom Filter"""
    customFilter: TraceCustomFilter
  ): TracesConnection!

  """The account that owns the workflow."""
  account: Account_Account @deprecated(reason: "use workflow.owner instead")

  """The account that owns the workflow."""
  owner: Account_Account
}

"""
A condition to be used against `Workflow` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WorkflowCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `documentation` field."""
  documentation: DocumentationInput

  """Checks for equality with the object’s `settings` field."""
  settings: JSON

  """Checks for equality with the object’s `draft` field."""
  draft: Boolean

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: BigInt
}

"""The config of a workflow."""
type WorkflowConfig implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """ID of the workflow config."""
  rowId: BigInt!

  """The ID of the workflow."""
  workflowId: BigInt!

  """The overview configuration of the workflow."""
  overview: JSON

  """The JSON schema of the workflow state."""
  stateSchema: JSON

  """The initial state of each trace in the workflow."""
  initState: JSON

  """The actions that may be used to start a trace."""
  initActions: JSON @deprecated(reason: "Use workflowConfig.transitions instead")

  """The actions relative to the business logic of the workflow."""
  actions: JSON

  """The version number of the config."""
  version: BigInt!

  """Denotes whether or not this is the active version of the config."""
  active: Boolean!

  """The time when the config was created."""
  createdAt: Datetime!

  """The time when the config was last upadted."""
  updatedAt: Datetime!

  """The display config for the trace info view."""
  info: JSON

  """
  The migration that has been run upon creating this workflow config entry.
  """
  migration: JSON

  """Does this workflow allow automation in action effects"""
  allowAutomation: Boolean

  """
  DSL definitions that can be referenced from other parts of the configuration.
  """
  definitions: JSON

  """
  Describes the transitions between actions that are allowed on the workflow.
  """
  transitions: JSON

  """Reporting-specific workflow configuration."""
  reporting: JSON

  """Reads a single `Workflow` that is related to this `WorkflowConfig`."""
  workflow: Workflow

  """Reads and enables pagination through a set of `Link`."""
  links(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Link`."""
    orderBy: [LinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LinkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LinkFilter
  ): LinksConnection!

  """Workflow actions without DSL reference evaluation"""
  rawActions: JSON

  """Trace info configuration without DSL reference evaluation"""
  rawInfo: JSON

  """Overview table configuration without DSL reference evaluation"""
  rawOverview: JSON
}

"""
Represents an update to a `WorkflowConfig`. Fields that are set will be updated.
"""
input WorkflowConfigPatch {
  """The overview configuration of the workflow."""
  overview: JSON

  """The display config for the trace info view."""
  info: JSON

  """
  The migration that has been run upon creating this workflow config entry.
  """
  migration: JSON

  """Does this workflow allow automation in action effects"""
  allowAutomation: Boolean

  """
  DSL definitions that can be referenced from other parts of the configuration.
  """
  definitions: JSON

  """Reporting-specific workflow configuration."""
  reporting: JSON
}

"""
A filter to be used against `Workflow` object types. All fields are combined with a logical ‘and.’
"""
input WorkflowFilter {
  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `settings` field."""
  settings: JSONFilter

  """Filter by the object’s `draft` field."""
  draft: BooleanFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: BigIntFilter

  """Filter by the object’s `accountId` field."""
  accountId: BigIntFilter

  """Filter by the object’s `archived` field."""
  archived: BooleanFilter

  """Filter by the object’s `canUpdate` field."""
  canUpdate: BooleanFilter

  """Filter by the object’s `isAdmin` field."""
  isAdmin: BooleanFilter

  """Filter by the object’s `isReader` field."""
  isReader: BooleanFilter

  """Filter by the object’s `lastMigration` field."""
  lastMigration: JSONFilter

  """Filter by the object’s `documentation` field."""
  documentation: DocumentationFilter

  """Checks for all expressions in this list."""
  and: [WorkflowFilter!]

  """Checks for any expressions in this list."""
  or: [WorkflowFilter!]

  """Negates the expression."""
  not: WorkflowFilter
}

"""An input for mutations affecting `WorkflowInputRecord`"""
input WorkflowInputRecordInput {
  """The name of the workflow."""
  name: String

  """The description of the workflow."""
  description: String

  """The Account ID of the organization that owns the workflow."""
  ownerId: BigInt

  """The workflow settings."""
  settings: JSON
}

type WorkflowMember {
  """Account id in Stratumn account."""
  accountId: BigInt

  """Is the member a reader."""
  reader: Boolean

  """Is the member an admin."""
  admin: Boolean

  """The account of the member entity."""
  account: Account_Account
}

"""
A filter to be used against `WorkflowMember` object types. All fields are combined with a logical ‘and.’
"""
input WorkflowMemberFilter {
  """Filter by the object’s `accountId` field."""
  accountId: BigIntFilter

  """Filter by the object’s `reader` field."""
  reader: BooleanFilter

  """Filter by the object’s `admin` field."""
  admin: BooleanFilter

  """Checks for all expressions in this list."""
  and: [WorkflowMemberFilter!]

  """Checks for any expressions in this list."""
  or: [WorkflowMemberFilter!]

  """Negates the expression."""
  not: WorkflowMemberFilter
}

"""A connection to a list of `WorkflowMember` values."""
type WorkflowMembersConnection {
  """A list of `WorkflowMember` objects."""
  nodes: [WorkflowMember]!

  """
  A list of edges which contains the `WorkflowMember` and cursor to aid in pagination.
  """
  edges: [WorkflowMembersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WorkflowMember` you could get from the connection."""
  totalCount: Int!
}

"""A `WorkflowMember` edge in the connection."""
type WorkflowMembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WorkflowMember` at the end of the edge."""
  node: WorkflowMember
}

"""
Represents an update to a `Workflow`. Fields that are set will be updated.
"""
input WorkflowPatch {
  """The name of the workflow."""
  name: String

  """The description of the workflow."""
  description: String

  """Dont't use this its deprecated!"""
  overviewConfig: JSON

  """jsonb object for workflow configuration"""
  settings: JSON

  """Denotes whether or not this workflow is a draft"""
  draft: Boolean
}

"""A connection to a list of `Workflow` values."""
type WorkflowsConnection {
  """A list of `Workflow` objects."""
  nodes: [Workflow]!

  """
  A list of edges which contains the `Workflow` and cursor to aid in pagination.
  """
  edges: [WorkflowsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Workflow` you could get from the connection."""
  totalCount: Int!
}

"""A `Workflow` edge in the connection."""
type WorkflowsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Workflow` at the end of the edge."""
  node: Workflow
}

"""Methods to use when ordering `Workflow`."""
enum WorkflowsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DOCUMENTATION_ASC
  DOCUMENTATION_DESC
  SETTINGS_ASC
  SETTINGS_DESC
  DRAFT_ASC
  DRAFT_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
